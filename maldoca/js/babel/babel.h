// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef MALDOCA_JS_BABEL_BABEL_H_
#define MALDOCA_JS_BABEL_BABEL_H_

#include <optional>
#include <string>

#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "absl/time/time.h"
#include "maldoca/js/babel/babel.pb.h"

namespace maldoca {

struct BabelParseResult {
  // The Babel AST as a string.
  BabelAstString ast_string;

  // Note: The AST and errors might coexist, since some errors are recoverable.
  BabelErrors errors;
};

struct BabelGenerateResult {
  // The source code generated by Babel.
  std::string source_code;

  // The error when generation fails.
  // TODO: Determine if source_code and error can co-exist, or they should be in
  // a std::variant.
  std::optional<BabelError> error;
};

class Babel {
 public:
  virtual ~Babel() = default;

  // Uses @babel/parser to parse a piece of JavaScript code.
  // If Babel crashes, returns absl::Status.
  // If Babel fails to parse the code, returns an error in BabelParseResponse.
  virtual absl::StatusOr<BabelParseResult> Parse(
      absl::string_view source_code, const BabelParseRequest& request,
      absl::Duration timeout) = 0;

  // Uses @babel/generator to generate a piece of JavaScript code from an AST.
  // If Babel crashes, returns absl::Status.
  // If Babel fails to generate the code, returns an error in
  // BabelGenerateResponse.
  virtual absl::StatusOr<BabelGenerateResult> Generate(
      const BabelAstString& ast_string, const BabelGenerateOptions& opts,
      absl::Duration timeout) = 0;
};

}  // namespace maldoca

#endif  // MALDOCA_JS_BABEL_BABEL_H_
